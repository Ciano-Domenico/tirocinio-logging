services:
  # ===== APPLICAZIONI DI ESEMPIO =====
  app1:
    image: nginx:alpine
    container_name: app1
    volumes:
      - ./apps/app1.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal

  app2:
    image: httpd:alpine
    container_name: app2
    networks:
      - internal

  app3:
    image: node:alpine
    container_name: app3
    working_dir: /app
    volumes:
      - ./apps/simple-node-app:/app
    command: node server.js
    networks:
      - internal
    depends_on:
      - app1
      - app2

  # ===== REVERSE PROXY NGINX =====
  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-proxy/logs:/var/log/nginx
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - internal
      - logging
    depends_on:
      - app1
      - app2
      - app3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ===== ELK STACK OTTIMIZZATO =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      # Configurazione base
      - discovery.type=single-node
      - cluster.name=elk-cluster
      - node.name=elk-node-1

      # Sicurezza disabilitata per sviluppo
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false

      # Ottimizzazioni memoria (RIDOTTE per sviluppo)
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true

      # Ottimizzazioni performance
      - indices.fielddata.cache.size=40%
      - indices.memory.index_buffer_size=10%

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

    ports:
      - "9200:9200"
      - "9300:9300"

    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

    networks:
      - logging

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 15
      start_period: 120s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./nginx-proxy/logs:/var/log/nginx:ro
    ports:
      - "5000:5000"  # HTTP input
      - "5044:5044"  # Beats input
      - "9600:9600"  # API endpoint
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging
    environment:
      # Ottimizzazioni memoria
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - "LS_HEAP_SIZE=256m"

      # Configurazione pipeline
      - PIPELINE_WORKERS=2
      - PIPELINE_BATCH_SIZE=125
      - PIPELINE_BATCH_DELAY=50

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 90s

    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      # Connessione Elasticsearch
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=
      - ELASTICSEARCH_PASSWORD=

      # Configurazioni base
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=5601

      # Ottimizzazioni
      - LOGGING_QUIET=true
      - NODE_OPTIONS="--max-old-space-size=512"

    ports:
      - "5601:5601"

    depends_on:
      elasticsearch:
        condition: service_healthy

    networks:
      - logging

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 180s

    restart: unless-stopped

  # ===== LOKI + GRAFANA STACK =====
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./promtail:/etc/promtail
      - ./nginx-proxy/logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - logging

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===== MONITORING AGGIUNTIVO =====
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    networks:
      - logging
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== GENERATORE DI TRAFFICO CONTROLLATO =====
  traffic-generator:
    image: alpine/curl
    container_name: traffic-generator
    depends_on:
      - nginx-proxy
    networks:
      - internal
    command: >
      sh -c "
        echo 'Generatore di traffico avviato...';
        while true; do
          # Traffico normale
          curl -s http://nginx-proxy/app1/ > /dev/null || true;
          sleep 2;
          curl -s http://nginx-proxy/app2/ > /dev/null || true;
          sleep 2;
          curl -s http://nginx-proxy/app3/ > /dev/null || true;
          sleep 3;

          # Alcuni errori per testare il logging
          curl -s http://nginx-proxy/nonexistent > /dev/null || true;
          sleep 1;
          curl -s http://nginx-proxy/app3/error > /dev/null || true;
          sleep 5;
        done
      "
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  logging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
