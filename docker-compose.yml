
services:
  # ===== APPLICAZIONI DI ESEMPIO =====
  app1:
    image: nginx:alpine
    container_name: app1
    volumes:
      - ./apps/app1.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal

  app2:
    image: httpd:alpine
    container_name: app2
    networks:
      - internal

  app3:
    image: node:alpine
    container_name: app3
    working_dir: /app
    volumes:
      - ./apps/simple-node-app:/app
    command: node server.js
    networks:
      - internal
    depends_on:
      - app1
      - app2

  # ===== REVERSE PROXY NGINX =====
  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-proxy/logs:/var/log/nginx
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - internal
      - logging
    depends_on:
      - app1
      - app2
      - app3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ===== ELK STACK =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config:/usr/share/logstash/config
      - ./nginx-proxy/logs:/var/log/nginx:ro
    ports:
      - "5000:5000"
      - "5044:5044"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging
    environment:
      - LS_JAVA_OPTS=-Xmx512m -Xms512m

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=
      - ELASTICSEARCH_PASSWORD=
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - logging

  # ===== LOKI + GRAFANA STACK =====
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - logging

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./promtail:/etc/promtail
      - ./nginx-proxy/logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - logging

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - loki
    networks:
      - logging

  # ===== MONITORING AGGIUNTIVO =====
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - logging

  # ===== GENERATORE DI TRAFFICO =====
  traffic-generator:
    image: alpine/curl
    container_name: traffic-generator
    depends_on:
      - nginx-proxy
    networks:
      - internal
    command: >
      sh -c "
        while true; do
          curl -s http://nginx-proxy/app1/ || true;
          curl -s http://nginx-proxy/app2/ || true;
          curl -s http://nginx-proxy/app3/ || true;
          curl -s http://nginx-proxy/nonexistent || true;
          sleep 5;
        done
      "

volumes:
  elasticsearch_data:
  loki_data:
  grafana_data:
  prometheus_data:

networks:
  internal:
    driver: bridge
  logging:
    driver: bridge
